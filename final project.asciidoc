+*In[1]:*+
[source, ipython3]
----
from bs4 import BeautifulSoup
import requests
import pandas as pd

----


+*In[2]:*+
[source, ipython3]
----
List_url = "https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M"
source = requests.get(List_url).text

----


+*In[3]:*+
[source, ipython3]
----
soup = BeautifulSoup(source, 'xml')
----


+*In[4]:*+
[source, ipython3]
----
table=soup.find('table')
----


+*In[5]:*+
[source, ipython3]
----
column_names = ['Postalcode','Borough','Neighborhood']
df = pd.DataFrame(columns = column_names)
----


+*In[6]:*+
[source, ipython3]
----
for tr_cell in table.find_all('tr'):
    row_data=[]
    for td_cell in tr_cell.find_all('td'):
        row_data.append(td_cell.text.strip())
    if len(row_data)==3:
        df.loc[len(df)] = row_data
----


+*In[7]:*+
[source, ipython3]
----
df.head()
----


+*Out[7]:*+
----
[cols=",,,",options="header",]
|===
| |Postalcode |Borough |Neighborhood
|0 |M1A |Not assigned |
|1 |M2A |Not assigned |
|2 |M3A |North York |Parkwoods
|3 |M4A |North York |Victoria Village
|4 |M5A |Downtown Toronto |Regent Park, Harbourfront
|===
----


+*In[8]:*+
[source, ipython3]
----
df=df[df['Borough']!='Not assigned']
----


+*In[11]:*+
[source, ipython3]
----
df.head(10)
----


+*Out[11]:*+
----
[cols=",,,",options="header",]
|===
| |Postalcode |Borough |Neighborhood
|2 |M3A |North York |Parkwoods
|3 |M4A |North York |Victoria Village
|4 |M5A |Downtown Toronto |Regent Park, Harbourfront
|5 |M6A |North York |Lawrence Manor, Lawrence Heights
|6 |M7A |Downtown Toronto |Queen's Park, Ontario Provincial Government
|8 |M9A |Etobicoke |Islington Avenue
|9 |M1B |Scarborough |Malvern, Rouge
|11 |M3B |North York |Don Mills
|12 |M4B |East York |Parkview Hill, Woodbine Gardens
|13 |M5B |Downtown Toronto |Garden District, Ryerson
|===
----


+*In[12]:*+
[source, ipython3]
----
temp_df=df.groupby('Postalcode')['Neighborhood'].apply(lambda x: "%s" % ', '.join(x))
temp_df=temp_df.reset_index(drop=False)
temp_df.rename(columns={'Neighborhood':'Neighborhood_joined'},inplace=True)
----


+*In[13]:*+
[source, ipython3]
----
df_merge = pd.merge(df, temp_df, on='Postalcode')
----


+*In[14]:*+
[source, ipython3]
----
df_merge.drop(['Neighborhood'],axis=1,inplace=True)

----


+*In[15]:*+
[source, ipython3]
----
df_merge.drop_duplicates(inplace=True)

----


+*In[30]:*+
[source, ipython3]
----
df_merge.rename(columns={'Neighbourhood_joined':'Neighbourhood'},inplace=True)
df_merge.head()
----


+*In[31]:*+
[source, ipython3]
----
df_merge.head()

----


+*Out[31]:*+
----
[cols=",,,",options="header",]
|===
| |Postalcode |Borough |Neighborhood
|0 |M3A |North York |Parkwoods
|1 |M4A |North York |Victoria Village
|2 |M5A |Downtown Toronto |Regent Park, Harbourfront
|3 |M6A |North York |Lawrence Manor, Lawrence Heights
|4 |M7A |Downtown Toronto |Queen's Park, Ontario Provincial Government
|===
----


+*In[18]:*+
[source, ipython3]
----

----


+*Out[18]:*+
----(103, 3)----

THIS is part 2 of the project


+*In[23]:*+
[source, ipython3]
----
def get_geocode(postal_code):
    # initialize your variable to None
    lat_lng_coords = None
    while(lat_lng_coords is None):
        g = geocoder.google('{}, Toronto, Ontario'.format(postal_code))
        lat_lng_coords = g.latlng
    latitude = lat_lng_coords[0]
    longitude = lat_lng_coords[1]
    return latitude,longitude

----


+*In[24]:*+
[source, ipython3]
----

geo_df=pd.read_csv('http://cocl.us/Geospatial_data')
----


+*In[25]:*+
[source, ipython3]
----
geo_df.head()
----


+*Out[25]:*+
----
[cols=",,,",options="header",]
|===
| |Postal Code |Latitude |Longitude
|0 |M1B |43.806686 |-79.194353
|1 |M1C |43.784535 |-79.160497
|2 |M1E |43.763573 |-79.188711
|3 |M1G |43.770992 |-79.216917
|4 |M1H |43.773136 |-79.239476
|===
----


+*In[26]:*+
[source, ipython3]
----
geo_df.rename(columns={'Postal Code':'Postalcode'},inplace=True)
geo_merged = pd.merge(geo_df, df_merge, on='Postalcode')
----


+*In[32]:*+
[source, ipython3]
----
geo_data=geo_merged[['Postalcode','Borough','Neighborhood','Latitude','Longitude']]
----


+*In[33]:*+
[source, ipython3]
----
geo_data.head()
----


+*Out[33]:*+
----
[cols=",,,,,",options="header",]
|===
| |Postalcode |Borough |Neighborhood |Latitude |Longitude
|0 |M1B |Scarborough |Malvern, Rouge |43.806686 |-79.194353

|1 |M1C |Scarborough |Rouge Hill, Port Union, Highland Creek |43.784535
|-79.160497

|2 |M1E |Scarborough |Guildwood, Morningside, West Hill |43.763573
|-79.188711

|3 |M1G |Scarborough |Woburn |43.770992 |-79.216917

|4 |M1H |Scarborough |Cedarbrae |43.773136 |-79.239476
|===
----

THIS IS THE FINAL PART OF THE PROJECT


+*In[34]:*+
[source, ipython3]
----
toronto_data=geo_data[geo_data['Borough'].str.contains("Toronto")]
toronto_data.head()
----


+*Out[34]:*+
----
[cols=",,,,,",options="header",]
|===
| |Postalcode |Borough |Neighborhood |Latitude |Longitude
|37 |M4E |East Toronto |The Beaches |43.676357 |-79.293031

|41 |M4K |East Toronto |The Danforth West, Riverdale |43.679557
|-79.352188

|42 |M4L |East Toronto |India Bazaar, The Beaches West |43.668999
|-79.315572

|43 |M4M |East Toronto |Studio District |43.659526 |-79.340923

|44 |M4N |Central Toronto |Lawrence Park |43.728020 |-79.388790
|===
----


+*In[35]:*+
[source, ipython3]
----
CLIENT_ID = '32DGC5EEFO2Y1ZACBPD1CLDWWWJT3Q5JYLPUIGP4IFUWSY5T'
CLIENT_SECRET = 'YJBGTZJVDWPHY0RIGFWKH1UQJX4IXIBKXJJYGAEYC1HMLH41' 
VERSION = '20180604'
----


+*In[36]:*+
[source, ipython3]
----
def getNearbyVenues(names, latitudes, longitudes):
    radius=500
    LIMIT=100
    venues_list=[]
    for name, lat, lng in zip(names, latitudes, longitudes):
        print(name)
            
        # create the API request URL
        url = 'https://api.foursquare.com/v2/venues/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(
            CLIENT_ID, 
            CLIENT_SECRET, 
            VERSION, 
            lat, 
            lng, 
            radius, 
            LIMIT)
            
        # make the GET request
        results = requests.get(url).json()["response"]['groups'][0]['items']
        
        # return only relevant information for each nearby venue
        venues_list.append([(
            name, 
            lat, 
            lng, 
            v['venue']['name'], 
            v['venue']['location']['lat'], 
            v['venue']['location']['lng'],  
            v['venue']['categories'][0]['name']) for v in results])

    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])
    nearby_venues.columns = ['Neighborhood', 
                  'Neighborhood Latitude', 
                  'Neighborhood Longitude', 
                  'Venue', 
                  'Venue Latitude', 
                  'Venue Longitude', 
                  'Venue Category']
    
    return(nearby_venues)
----


+*In[37]:*+
[source, ipython3]
----
toronto_venues = getNearbyVenues(names=toronto_data['Neighborhood'],
                                   latitudes=toronto_data['Latitude'],
                                   longitudes=toronto_data['Longitude']
                                  )
----


+*Out[37]:*+
----
The Beaches
The Danforth West, Riverdale
India Bazaar, The Beaches West
Studio District
Lawrence Park
Davisville North
North Toronto West
Davisville
Moore Park, Summerhill East
Summerhill West, Rathnelly, South Hill, Forest Hill SE, Deer Park
Rosedale
St. James Town, Cabbagetown
Church and Wellesley
Regent Park, Harbourfront
Garden District, Ryerson
St. James Town
Berczy Park
Central Bay Street
Richmond, Adelaide, King
Harbourfront East, Union Station, Toronto Islands
Toronto Dominion Centre, Design Exchange
Commerce Court, Victoria Hotel
Roselawn
Forest Hill North & West
The Annex, North Midtown, Yorkville
University of Toronto, Harbord
Kensington Market, Chinatown, Grange Park
CN Tower, King and Spadina, Railway Lands, Harbourfront West, Bathurst Quay, South Niagara, Island airport
Stn A PO Boxes
First Canadian Place, Underground city
Christie
Dufferin, Dovercourt Village
Little Portugal, Trinity
Brockton, Parkdale Village, Exhibition Place
High Park, The Junction South
Parkdale, Roncesvalles
Runnymede, Swansea
Queen's Park, Ontario Provincial Government
Business reply mail Processing Centre
----


+*In[38]:*+
[source, ipython3]
----
toronto_venues.head()
----


+*Out[38]:*+
----
[cols=",,,,,,,",options="header",]
|===
| |Neighborhood |Neighborhood Latitude |Neighborhood Longitude |Venue
|Venue Latitude |Venue Longitude |Venue Category
|0 |The Beaches |43.676357 |-79.293031 |Glen Manor Ravine |43.676821
|-79.293942 |Trail

|1 |The Beaches |43.676357 |-79.293031 |The Big Carrot Natural Food
Market |43.678879 |-79.297734 |Health Food Store

|2 |The Beaches |43.676357 |-79.293031 |Grover Pub and Grub |43.679181
|-79.297215 |Pub

|3 |The Beaches |43.676357 |-79.293031 |Upper Beaches |43.680563
|-79.292869 |Neighborhood

|4 |The Danforth West, Riverdale |43.679557 |-79.352188 |MenEssentials
|43.677820 |-79.351265 |Cosmetics Shop
|===
----


+*In[39]:*+
[source, ipython3]
----
toronto_venues.groupby('Neighborhood').count()
----


+*Out[39]:*+
----
Neighborhood Latitude

Neighborhood Longitude

Venue

Venue Latitude

Venue Longitude

Venue Category

Neighborhood

Berczy Park

57

57

57

57

57

57

Brockton, Parkdale Village, Exhibition Place

23

23

23

23

23

23

Business reply mail Processing Centre

18

18

18

18

18

18

CN Tower, King and Spadina, Railway Lands, Harbourfront West, Bathurst
Quay, South Niagara, Island airport

17

17

17

17

17

17

Central Bay Street

61

61

61

61

61

61

Christie

17

17

17

17

17

17

Church and Wellesley

73

73

73

73

73

73

Commerce Court, Victoria Hotel

100

100

100

100

100

100

Davisville

35

35

35

35

35

35

Davisville North

7

7

7

7

7

7

Dufferin, Dovercourt Village

18

18

18

18

18

18

First Canadian Place, Underground city

100

100

100

100

100

100

Forest Hill North & West

4

4

4

4

4

4

Garden District, Ryerson

100

100

100

100

100

100

Harbourfront East, Union Station, Toronto Islands

100

100

100

100

100

100

High Park, The Junction South

23

23

23

23

23

23

India Bazaar, The Beaches West

20

20

20

20

20

20

Kensington Market, Chinatown, Grange Park

55

55

55

55

55

55

Lawrence Park

3

3

3

3

3

3

Little Portugal, Trinity

42

42

42

42

42

42

Moore Park, Summerhill East

2

2

2

2

2

2

North Toronto West

20

20

20

20

20

20

Parkdale, Roncesvalles

13

13

13

13

13

13

Queen's Park, Ontario Provincial Government

34

34

34

34

34

34

Regent Park, Harbourfront

48

48

48

48

48

48

Richmond, Adelaide, King

93

93

93

93

93

93

Rosedale

4

4

4

4

4

4

Roselawn

3

3

3

3

3

3

Runnymede, Swansea

37

37

37

37

37

37

St. James Town

76

76

76

76

76

76

St. James Town, Cabbagetown

45

45

45

45

45

45

Stn A PO Boxes

94

94

94

94

94

94

Studio District

40

40

40

40

40

40

Summerhill West, Rathnelly, South Hill, Forest Hill SE, Deer Park

16

16

16

16

16

16

The Annex, North Midtown, Yorkville

24

24

24

24

24

24

The Beaches

4

4

4

4

4

4

The Danforth West, Riverdale

42

42

42

42

42

42

Toronto Dominion Centre, Design Exchange

100

100

100

100

100

100

University of Toronto, Harbord

36

36

36

36

36

36
----


+*In[40]:*+
[source, ipython3]
----
toronto_onehot = pd.get_dummies(toronto_venues[['Venue Category']], prefix="", prefix_sep="")
toronto_onehot.drop(['Neighborhood'],axis=1,inplace=True) 
toronto_onehot.insert(loc=0, column='Neighborhood', value=toronto_venues['Neighborhood'] )
toronto_onehot.shape
----


+*Out[40]:*+
----(1604, 232)----


+*In[41]:*+
[source, ipython3]
----
toronto_grouped = toronto_onehot.groupby('Neighborhood').mean().reset_index()
toronto_grouped.head()
----


+*Out[41]:*+
----
[cols=",,,,,,,,,,,,,,,,,,,,,",options="header",]
|===
| |Neighborhood |Afghan Restaurant |Airport |Airport Food Court |Airport
Gate |Airport Lounge |Airport Service |Airport Terminal |American
Restaurant |Antique Shop |... |Theme Restaurant |Toy / Game Store |Trail
|Train Station |Vegetarian / Vegan Restaurant |Video Game Store
|Vietnamese Restaurant |Wine Bar |Women's Store |Yoga Studio
|0 |Berczy Park |0.0 |0.000000 |0.000000 |0.000000 |0.000000 |0.000000
|0.000000 |0.0 |0.0 |... |0.0 |0.0 |0.0 |0.0 |0.017544 |0.0 |0.0 |0.0
|0.0 |0.000000

|1 |Brockton, Parkdale Village, Exhibition Place |0.0 |0.000000
|0.000000 |0.000000 |0.000000 |0.000000 |0.000000 |0.0 |0.0 |... |0.0
|0.0 |0.0 |0.0 |0.000000 |0.0 |0.0 |0.0 |0.0 |0.043478

|2 |Business reply mail Processing Centre |0.0 |0.000000 |0.000000
|0.000000 |0.000000 |0.000000 |0.000000 |0.0 |0.0 |... |0.0 |0.0 |0.0
|0.0 |0.000000 |0.0 |0.0 |0.0 |0.0 |0.055556

|3 |CN Tower, King and Spadina, Railway Lands, Har... |0.0 |0.058824
|0.058824 |0.058824 |0.117647 |0.176471 |0.058824 |0.0 |0.0 |... |0.0
|0.0 |0.0 |0.0 |0.000000 |0.0 |0.0 |0.0 |0.0 |0.000000

|4 |Central Bay Street |0.0 |0.000000 |0.000000 |0.000000 |0.000000
|0.000000 |0.000000 |0.0 |0.0 |... |0.0 |0.0 |0.0 |0.0 |0.016393 |0.0
|0.0 |0.0 |0.0 |0.016393
|===

5 rows × 232 columns
----


+*In[42]:*+
[source, ipython3]
----
def return_most_common_venues(row, num_top_venues):
    row_categories = row.iloc[1:]
    row_categories_sorted = row_categories.sort_values(ascending=False)
    
    return row_categories_sorted.index.values[0:num_top_venues]
----


+*In[44]:*+
[source, ipython3]
----
import numpy as np
num_top_venues = 10

indicators = ['st', 'nd', 'rd']

# create columns according to number of top venues
columns = ['Neighborhood']
for ind in np.arange(num_top_venues):
    try:
        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))
    except:
        columns.append('{}th Most Common Venue'.format(ind+1))

# create a new dataframe
neighborhoods_venues_sorted = pd.DataFrame(columns=columns)
neighborhoods_venues_sorted['Neighborhood'] = toronto_grouped['Neighborhood']

for ind in np.arange(toronto_grouped.shape[0]):
    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(toronto_grouped.iloc[ind, :], num_top_venues)

neighborhoods_venues_sorted.head()
----


+*Out[44]:*+
----
[cols=",,,,,,,,,,,",options="header",]
|===
| |Neighborhood |1st Most Common Venue |2nd Most Common Venue |3rd Most
Common Venue |4th Most Common Venue |5th Most Common Venue |6th Most
Common Venue |7th Most Common Venue |8th Most Common Venue |9th Most
Common Venue |10th Most Common Venue
|0 |Berczy Park |Coffee Shop |Cocktail Bar |Beer Bar |Seafood Restaurant
|Bakery |Restaurant |Cheese Shop |Café |Jazz Club |Shopping Mall

|1 |Brockton, Parkdale Village, Exhibition Place |Café |Breakfast Spot
|Coffee Shop |Yoga Studio |Grocery Store |Pet Store |Performing Arts
Venue |Nightclub |Italian Restaurant |Intersection

|2 |Business reply mail Processing Centre |Light Rail Station |Auto
Workshop |Skate Park |Brewery |Smoke Shop |Spa |Farmers Market |Fast
Food Restaurant |Burrito Place |Restaurant

|3 |CN Tower, King and Spadina, Railway Lands, Har... |Airport Service
|Airport Lounge |Sculpture Garden |Harbor / Marina |Bar |Rental Car
Location |Plane |Coffee Shop |Boat or Ferry |Boutique

|4 |Central Bay Street |Coffee Shop |Café |Italian Restaurant |Sandwich
Place |Thai Restaurant |Bubble Tea Shop |Bar |Burger Joint |Department
Store |Salad Place
|===
----


+*In[47]:*+
[source, ipython3]
----
import pandas as pd
import numpy as np
import requests
from bs4 import BeautifulSoup
import os
from sklearn.cluster import KMeans
import folium 
import matplotlib.cm as cm
import matplotlib.colors as colors
----


+*In[48]:*+
[source, ipython3]
----
# set number of clusters
kclusters = 5

toronto_grouped_clustering = toronto_grouped.drop('Neighborhood', 1)

# run k-means clustering
kmeans = KMeans(n_clusters=kclusters, random_state=0).fit(toronto_grouped_clustering)

# check cluster labels generated for each row in the dataframe
kmeans.labels_[0:10]
----


+*Out[48]:*+
----array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)----


+*In[49]:*+
[source, ipython3]
----
# add clustering labels
neighborhoods_venues_sorted.insert(0, 'Cluster Labels', kmeans.labels_)

toronto_merged = toronto_data

# merge toronto_grouped with toronto_data to add latitude/longitude for each neighborhood
toronto_merged = toronto_merged.join(neighborhoods_venues_sorted.set_index('Neighborhood'), on='Neighborhood')

toronto_merged.head()
----


+*Out[49]:*+
----
[cols=",,,,,,,,,,,,,,,,",options="header",]
|===
| |Postalcode |Borough |Neighborhood |Latitude |Longitude |Cluster
Labels |1st Most Common Venue |2nd Most Common Venue |3rd Most Common
Venue |4th Most Common Venue |5th Most Common Venue |6th Most Common
Venue |7th Most Common Venue |8th Most Common Venue |9th Most Common
Venue |10th Most Common Venue
|37 |M4E |East Toronto |The Beaches |43.676357 |-79.293031 |0 |Health
Food Store |Trail |Pub |Yoga Studio |Department Store |Event Space
|Ethiopian Restaurant |Electronics Store |Eastern European Restaurant
|Donut Shop

|41 |M4K |East Toronto |The Danforth West, Riverdale |43.679557
|-79.352188 |0 |Greek Restaurant |Coffee Shop |Italian Restaurant |Ice
Cream Shop |Bookstore |Furniture / Home Store |Yoga Studio |Pub |Indian
Restaurant |Caribbean Restaurant

|42 |M4L |East Toronto |India Bazaar, The Beaches West |43.668999
|-79.315572 |0 |Park |Fast Food Restaurant |Gym |Pub |Brewery |Sandwich
Place |Burrito Place |Restaurant |Italian Restaurant |Fish & Chips Shop

|43 |M4M |East Toronto |Studio District |43.659526 |-79.340923 |0 |Café
|Coffee Shop |Gastropub |Bakery |Brewery |American Restaurant |Comfort
Food Restaurant |Seafood Restaurant |Sandwich Place |Cheese Shop

|44 |M4N |Central Toronto |Lawrence Park |43.728020 |-79.388790 |4 |Park
|Swim School |Bus Line |Yoga Studio |Dessert Shop |Event Space
|Ethiopian Restaurant |Electronics Store |Eastern European Restaurant
|Donut Shop
|===
----


+*In[50]:*+
[source, ipython3]
----
neighborhoods_venues_sorted.head()
----


+*Out[50]:*+
----
[cols=",,,,,,,,,,,,",options="header",]
|===
| |Cluster Labels |Neighborhood |1st Most Common Venue |2nd Most Common
Venue |3rd Most Common Venue |4th Most Common Venue |5th Most Common
Venue |6th Most Common Venue |7th Most Common Venue |8th Most Common
Venue |9th Most Common Venue |10th Most Common Venue
|0 |0 |Berczy Park |Coffee Shop |Cocktail Bar |Beer Bar |Seafood
Restaurant |Bakery |Restaurant |Cheese Shop |Café |Jazz Club |Shopping
Mall

|1 |0 |Brockton, Parkdale Village, Exhibition Place |Café |Breakfast
Spot |Coffee Shop |Yoga Studio |Grocery Store |Pet Store |Performing
Arts Venue |Nightclub |Italian Restaurant |Intersection

|2 |0 |Business reply mail Processing Centre |Light Rail Station |Auto
Workshop |Skate Park |Brewery |Smoke Shop |Spa |Farmers Market |Fast
Food Restaurant |Burrito Place |Restaurant

|3 |0 |CN Tower, King and Spadina, Railway Lands, Har... |Airport
Service |Airport Lounge |Sculpture Garden |Harbor / Marina |Bar |Rental
Car Location |Plane |Coffee Shop |Boat or Ferry |Boutique

|4 |0 |Central Bay Street |Coffee Shop |Café |Italian Restaurant
|Sandwich Place |Thai Restaurant |Bubble Tea Shop |Bar |Burger Joint
|Department Store |Salad Place
|===
----


+*In[58]:*+
[source, ipython3]
----
!pip install geopy
import geopy
from geopy import Nominatim
address = 'Toronto, CA'

geolocator = Nominatim(user_agent="ny_explorer")
location = geolocator.geocode(address)
latitude = location.latitude
longitude = location.longitude
print('The geograpical coordinate of Manhattan are {}, {}.'.format(latitude, longitude))
----


+*Out[58]:*+
----
Requirement already satisfied: geopy in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (1.21.0)
Requirement already satisfied: geographiclib<2,>=1.49 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from geopy) (1.50)
The geograpical coordinate of Manhattan are 43.6534817, -79.3839347.
----


+*In[59]:*+
[source, ipython3]
----
map_clusters = folium.Map(location=[latitude, longitude], zoom_start=11)

# set color scheme for the clusters
x = np.arange(kclusters)
ys = [i + x + (i*x)**2 for i in range(kclusters)]
colors_array = cm.rainbow(np.linspace(0, 1, len(ys)))
rainbow = [colors.rgb2hex(i) for i in colors_array]

# add markers to the map
markers_colors = []
for lat, lon, poi, cluster in zip(toronto_merged['Latitude'], toronto_merged['Longitude'], toronto_merged['Neighborhood'], toronto_merged['Cluster Labels']):
    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)
    folium.CircleMarker(
        [lat, lon],
        radius=5,
        popup=label,
        color=rainbow[cluster-1],
        fill=True,
        fill_color=rainbow[cluster-1],
        fill_opacity=0.7).add_to(map_clusters)
       
map_clusters
----


+*Out[59]:*+
----
Make this Notebook Trusted to load map: File -> Trust Notebook
----


+*In[ ]:*+
[source, ipython3]
----

----
